{"version":3,"file":"bot_model.js","sources":["model/bot_model.js"],"sourcesContent":["import { setStorageData, getStorageData } from '../utils/storage';\r\n\r\n// 存储键名常量\r\nconst BOT_STORAGE_KEY = 'chatbot_config';\r\nconst BOT_LIST_KEY = 'chatbot_list';  // 新增机器人列表的存储键名\r\n\r\n/**\r\n * Bot 数据结构\r\n * @typedef {Object} BotConfig\r\n * @property {string} avatar - 机器人头像URL\r\n * @property {string} greeting - 默认的欢迎语\r\n * @property {string} persona - 人物设定\r\n * @property {string} [background] - 背景设定，可选\r\n */\r\n\r\n/**\r\n * 默认的机器人配置\r\n */\r\nconst DEFAULT_BOT_CONFIG = {\r\n  avatar: '/static/default_avatar.png', // 默认头像路径\r\n  greeting: '你好！我是你的AI助手，有什么我可以帮你的吗？',\r\n  persona: '我是一个友好、专业的AI助手',\r\n  background: ''\r\n};\r\n\r\n/**\r\n * Bot 类 - 管理单个机器人的配置\r\n */\r\nclass Bot {\r\n  /**\r\n   * @param {string} id - 机器人ID\r\n   * @param {Object} config - 机器人配置\r\n   * @param {string} config.name - 机器人名称\r\n   * @param {string} config.avatar - 机器人头像\r\n   * @param {string} config.description - 机器人描述\r\n   * @param {string} config.greeting - 欢迎语\r\n   * @param {string} config.persona - 人物设定\r\n   * @param {string} [config.background] - 背景设定\r\n   * @param {string} [config.createTime] - 创建时间\r\n   */\r\n  constructor(id, config) {\r\n    this.id = id;\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * 更新机器人配置\r\n   * @param {Partial<BotConfig>} updates - 需要更新的字段\r\n   * @returns {Promise<void>}\r\n   */\r\n  async update(updates) {\r\n    try {\r\n      // 更新配置\r\n      this.config = { ...this.config, ...updates };\r\n      \r\n      // 保存到存储\r\n      await setStorageData(`${BOT_STORAGE_KEY}_${this.id}`, this.config);\r\n      \r\n      // 如果更新了列表项相关的字段，也更新列表\r\n      if (updates.name || updates.avatar || updates.description) {\r\n        const list = await getStorageData(BOT_LIST_KEY) || [];\r\n        const updatedList = list.map(item => {\r\n          if (item.id === this.id) {\r\n            return {\r\n              ...item,\r\n              name: this.config.name,\r\n              avatar: this.config.avatar,\r\n              description: this.config.description\r\n            };\r\n          }\r\n          return item;\r\n        });\r\n        await setStorageData(BOT_LIST_KEY, updatedList);\r\n      }\r\n    } catch (error) {\r\n      console.error('更新机器人配置失败:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取完整配置\r\n   * @returns {Object} 机器人完整配置\r\n   */\r\n  getConfig() {\r\n    return this.config;\r\n  }\r\n}\r\n\r\n/**\r\n * 获取机器人列表\r\n * @returns {Promise<Bot[]>} 返回机器人对象数组\r\n */\r\nexport const getBotList = async () => {\r\n  try {\r\n    const list = await getStorageData(BOT_LIST_KEY) || [];\r\n    const bots = await Promise.all(\r\n      list.map(async (item) => {\r\n        const config = await getStorageData(`${BOT_STORAGE_KEY}_${item.id}`);\r\n        return new Bot(item.id, { ...config, ...item });\r\n      })\r\n    );\r\n    return bots;\r\n  } catch (error) {\r\n    console.error('获取机器人列表失败:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * 根据ID获取机器人\r\n * @param {string} botId - 机器人ID\r\n * @returns {Promise<Bot>} 返回机器人对象\r\n */\r\nexport const getBot = async (botId) => {\r\n  try {\r\n    const config = await getStorageData(`${BOT_STORAGE_KEY}_${botId}`);\r\n    const list = await getStorageData(BOT_LIST_KEY) || [];\r\n    const listItem = list.find(item => item.id === botId);\r\n    \r\n    if (!config || !listItem) {\r\n      throw new Error('机器人不存在');\r\n    }\r\n    \r\n    return new Bot(botId, { ...config, ...listItem });\r\n  } catch (error) {\r\n    console.error(`获取机器人(${botId})失败:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 创建新的机器人\r\n * @param {Object} botInfo - 机器人信息\r\n * @returns {Promise<Bot>} 返回新创建的机器人对象\r\n */\r\nexport const newBot = async (botInfo) => {\r\n  try {\r\n    const botId = \"bot_\" + Date.now();\r\n    const config = {\r\n      ...botInfo,\r\n      createTime: (/* @__PURE__ */ new Date()).toISOString()\r\n    };\r\n    \r\n    // 创建新机器人\r\n    const bot = new Bot(botId, config);\r\n    \r\n    // 保存机器人配置\r\n    await setStorageData(`${BOT_STORAGE_KEY}_${botId}`, config);\r\n    \r\n    // 获取现有列表，如果获取失败则初始化为空数组\r\n    let currentList = [];\r\n    try {\r\n      currentList = await getStorageData(BOT_LIST_KEY) || [];\r\n    } catch (error) {\r\n      // 如果是数据不存在的错误，使用空数组继续\r\n      if (error.errMsg && error.errMsg.includes('data not found')) {\r\n        currentList = [];\r\n      } else {\r\n        // 其他错误则抛出\r\n        throw error;\r\n      }\r\n    }\r\n    \r\n    // 创建列表项\r\n    const listItem = {\r\n      id: botId,\r\n      name: botInfo.name,\r\n      avatar: botInfo.avatar,\r\n      description: botInfo.description,\r\n      createTime: config.createTime\r\n    };\r\n    \r\n    // 保存更新后的列表\r\n    await setStorageData(BOT_LIST_KEY, [...currentList, listItem]);\r\n    \r\n    return bot;\r\n  } catch (error) {\r\n    console.error('创建新机器人失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 根据ID获取特定机器人的配置\r\n * @param {string} botId - 机器人ID\r\n * @returns {Promise<BotConfig>}\r\n */\r\nexport const getBotConfigById = async (botId) => {\r\n  try {\r\n    const config = await getStorageData(`${BOT_STORAGE_KEY}_${botId}`);\r\n    return config || DEFAULT_BOT_CONFIG;\r\n  } catch (error) {\r\n    console.error(`获取机器人(${botId})配置失败:`, error);\r\n    return DEFAULT_BOT_CONFIG;\r\n  }\r\n};\r\n\r\n/**\r\n * 保存机器人配置\r\n * @param {BotConfig} botConfig - 机器人配置对象\r\n * @returns {Promise<void>}\r\n */\r\nexport const saveBotConfig = async (botConfig) => {\r\n  try {\r\n    await setStorageData(BOT_STORAGE_KEY, botConfig);\r\n  } catch (error) {\r\n    console.error('保存机器人配置失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 获取机器人配置\r\n * @returns {Promise<BotConfig>} 返回机器人配置对象\r\n */\r\nexport const getBotConfig = async () => {\r\n  try {\r\n    const config = await getStorageData(BOT_STORAGE_KEY);\r\n    return config || DEFAULT_BOT_CONFIG;\r\n  } catch (error) {\r\n    console.error('获取机器人配置失败，使用默认配置:', error);\r\n    return DEFAULT_BOT_CONFIG;\r\n  }\r\n};\r\n\r\n/**\r\n * 更新机器人配置的特定字段\r\n * @param {Partial<BotConfig>} updates - 需要更新的字段\r\n * @returns {Promise<BotConfig>} 返回更新后的完整配置\r\n */\r\nexport const updateBotConfig = async (updates) => {\r\n  try {\r\n    const currentConfig = await getBotConfig();\r\n    const newConfig = { ...currentConfig, ...updates };\r\n    await saveBotConfig(newConfig);\r\n    return newConfig;\r\n  } catch (error) {\r\n    console.error('更新机器人配置失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"names":["setStorageData","getStorageData","uni"],"mappings":";;;AAGA,MAAM,kBAAkB;AACxB,MAAM,eAAe;AAwBrB,MAAM,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYR,YAAY,IAAI,QAAQ;AACtB,SAAK,KAAK;AACV,SAAK,SAAS;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,OAAO,SAAS;AACpB,QAAI;AAEF,WAAK,SAAS,EAAE,GAAG,KAAK,QAAQ,GAAG;AAGnC,YAAMA,cAAc,eAAC,GAAG,eAAe,IAAI,KAAK,EAAE,IAAI,KAAK,MAAM;AAGjE,UAAI,QAAQ,QAAQ,QAAQ,UAAU,QAAQ,aAAa;AACzD,cAAM,OAAO,MAAMC,cAAAA,eAAe,YAAY,KAAK,CAAA;AACnD,cAAM,cAAc,KAAK,IAAI,UAAQ;AACnC,cAAI,KAAK,OAAO,KAAK,IAAI;AACvB,mBAAO;AAAA,cACL,GAAG;AAAA,cACH,MAAM,KAAK,OAAO;AAAA,cAClB,QAAQ,KAAK,OAAO;AAAA,cACpB,aAAa,KAAK,OAAO;AAAA,YACvC;AAAA,UACW;AACD,iBAAO;AAAA,QACjB,CAAS;AACD,cAAMD,cAAc,eAAC,cAAc,WAAW;AAAA,MAC/C;AAAA,IACF,SAAQ,OAAO;AACdE,oBAAc,MAAA,MAAA,SAAA,4BAAA,cAAc,KAAK;AACjC,YAAM;AAAA,IACP;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,YAAY;AACV,WAAO,KAAK;AAAA,EACb;AACH;AAMY,MAAC,aAAa,YAAY;AACpC,MAAI;AACF,UAAM,OAAO,MAAMD,cAAAA,eAAe,YAAY,KAAK,CAAA;AACnD,UAAM,OAAO,MAAM,QAAQ;AAAA,MACzB,KAAK,IAAI,OAAO,SAAS;AACvB,cAAM,SAAS,MAAMA,cAAc,eAAC,GAAG,eAAe,IAAI,KAAK,EAAE,EAAE;AACnE,eAAO,IAAI,IAAI,KAAK,IAAI,EAAE,GAAG,QAAQ,GAAG,KAAI,CAAE;AAAA,MACtD,CAAO;AAAA,IACP;AACI,WAAO;AAAA,EACR,SAAQ,OAAO;AACdC,kBAAc,MAAA,MAAA,SAAA,6BAAA,cAAc,KAAK;AACjC,WAAO;EACR;AACH;AA6BY,MAAC,SAAS,OAAO,YAAY;AACvC,MAAI;AACF,UAAM,QAAQ,SAAS,KAAK,IAAG;AAC/B,UAAM,SAAS;AAAA,MACb,GAAG;AAAA,MACH,aAA6B,oBAAI,KAAM,GAAE,YAAa;AAAA,IAC5D;AAGI,UAAM,MAAM,IAAI,IAAI,OAAO,MAAM;AAGjC,UAAMF,cAAAA,eAAe,GAAG,eAAe,IAAI,KAAK,IAAI,MAAM;AAG1D,QAAI,cAAc,CAAA;AAClB,QAAI;AACF,oBAAc,MAAMC,cAAAA,eAAe,YAAY,KAAK,CAAA;AAAA,IACrD,SAAQ,OAAO;AAEd,UAAI,MAAM,UAAU,MAAM,OAAO,SAAS,gBAAgB,GAAG;AAC3D,sBAAc,CAAA;AAAA,MACtB,OAAa;AAEL,cAAM;AAAA,MACP;AAAA,IACF;AAGD,UAAM,WAAW;AAAA,MACf,IAAI;AAAA,MACJ,MAAM,QAAQ;AAAA,MACd,QAAQ,QAAQ;AAAA,MAChB,aAAa,QAAQ;AAAA,MACrB,YAAY,OAAO;AAAA,IACzB;AAGI,UAAMD,cAAAA,eAAe,cAAc,CAAC,GAAG,aAAa,QAAQ,CAAC;AAE7D,WAAO;AAAA,EACR,SAAQ,OAAO;AACdE,kBAAc,MAAA,MAAA,SAAA,6BAAA,aAAa,KAAK;AAChC,UAAM;AAAA,EACP;AACH;;;"}